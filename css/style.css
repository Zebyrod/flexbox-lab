* {
    box-sizing: border-box;
  }
  
  body {
    background-color: gray;
    font-family: system-ui, sans-serif;
    margin: 0;
  }
  
  nav {
    background-color: white;
    padding: 8px 16px;
    display: flex;
    justify-content: space-between; 
    align-items: center;
  }
  
/* Step 1 display flex turns my entire nav into a flex container  while align items ensures that all the elements are vertically centered*/

  p {
    margin: 0;
  }
  
  section {
    height: 460px;
    background-color: black;
    color: white;
    padding: 24px 72px;
  }
  
  h1,
  h2 {
    text-align: center;
  }
  
  h1 {
    margin-top: 0;
    font-size: 32px;
  }
  
  h2 {
    font-size: 16px;
    margin-bottom: 0;
  }
  
  input {
    height: 58px;
    width: 80%;
    max-width: 600px;
    border-radius: 29px;
    border: 0px;
    padding: 0 24px;
  }
  
  main {
    background-color: white;
    padding: 32px 72px;
  }
  
  nav button {
    background-color: #ea4c89;
    border-radius: 8px;
    padding: 10px 16px;
    border: 0;
    color: #ffffff;
    font-weight: 500;
  }

  /* Step 4 I am turning the entire main element into a flex-container */
  main {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: space-around;
  }

 
  .img-placeholder {
    width: 355px;
    height: 270px;
    background-color: gray;
    border-radius: 8px;
  }
  
  .card-footer {
    font-size: 14px;
  }
  
  .card-footer * {
    margin-top: 8px;
  }

/* Step 1 I created classes for the elements within my destinations and actions flex-containers. By adding padding this allows me to add spacing between each element */

  .left-nav {
    padding: 10px;
  }

  .right-nav {
    padding: 10px;
  }


  /* Step 4 These properties applied to my class card-footer elements makes them into flex containers while placing the text on opposite sides of their parent element */
  .card-footer {
    display: flex;
    justify-content: space-between;
    /* padding: 10px; */
  }

  .card {
    padding: 10px;
    margin: 5px;
  }


/* Step 1 This creates the divs with id destinations and actions into flex containers */

  #destinations {
    display: flex;
  }
  
  #actions {
    display: flex;
  }


  #subnav {
    padding: 32px 72px 0;
    background-color: white;
  }
  
  #subnav button {
    border-radius: 8px;
    padding: 10px 16px;
    border: 1px solid black;
    background-color: white;
  }
  
  #trending p {
    background-color: white;
    color: black;
    border-radius: 50px;
    padding: 6px 15px;
  }

  /* Step 2  I use display flex to make the hero section a flex container and to make the div with id of trending into a flex container within*/

  #hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-evenly;
  }

  /* I used justify content to achieve the proper spacing between elements. Could also use the "gap" property */
  /* flex direction changes the main  axis that the flexbox being used along. In this situation I changed the direction to column in order to get the elements to stack vertically*/
  
  #trending {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  #subnav {
    display: flex;
    justify-content: space-between;
  }

  /* Step 3 I used dispaly flex to make the div with id subnav into a flex container, then I used justify content to get the two buttons to be on opposite sides of the container */

